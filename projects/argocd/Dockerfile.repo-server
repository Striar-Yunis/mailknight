# ArgoCD Repository Server FIPS-Compliant Dockerfile
# Builds repo-server component with all required tools

# Use builder stage
FROM registry.access.redhat.com/ubi8/ubi:latest as builder

# Install build dependencies
RUN dnf update -y && \
    dnf install -y \
        git \
        gcc \
        gcc-c++ \
        make \
        curl \
        wget \
        ca-certificates \
        openssl-devel \
        krb5-devel \
        libcom_err-devel && \
    dnf clean all

# Install FIPS-compliant Go
ARG GO_VERSION=1.21.5
RUN curl -L "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" | \
    tar -xz -C /usr/local
ENV PATH="/usr/local/go/bin:$PATH"

# Install Node.js with FIPS support
ARG NODE_VERSION=18
RUN curl -fsSL https://rpm.nodesource.com/setup_${NODE_VERSION}.x | bash - && \
    dnf install -y nodejs && \
    dnf clean all

# Set FIPS mode and build flags
ENV OPENSSL_FORCE_FIPS_MODE=1
ENV CGO_ENABLED=1
ENV GOOS=linux
ENV GOARCH=amd64
ENV CGO_CFLAGS="-fstack-protector-strong -D_FORTIFY_SOURCE=2"
ENV CGO_LDFLAGS="-Wl,-z,relro,-z,now"

# Copy ArgoCD source
COPY source/ /src/
WORKDIR /src

# Build all ArgoCD components with hardening flags
RUN make build LDFLAGS="-linkmode external -extldflags '-static-pie -Wl,-z,relro,-z,now'" && \
    strip dist/argocd-* && \
    chmod 755 dist/argocd*

# Runtime stage for repo-server component
FROM registry.access.redhat.com/ubi8/ubi-minimal:latest

# Install repo-server-specific dependencies
RUN microdnf update -y && \
    microdnf install -y \
        ca-certificates \
        tzdata \
        git \
        git-lfs \
        openssh-clients \
        gnupg2 && \
    microdnf clean all

# Install Helm
ARG HELM_VERSION=3.12.0
RUN curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && \
    chmod 700 get_helm.sh && \
    ./get_helm.sh --version v${HELM_VERSION} && \
    rm get_helm.sh

# Install Kustomize
ARG KUSTOMIZE_VERSION=5.1.1
RUN curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash -s ${KUSTOMIZE_VERSION} /usr/local/bin

# Create non-root user
RUN groupadd -r argocd && \
    useradd -r -g argocd -s /bin/false argocd

# Copy repo-server binary
COPY --from=builder /src/dist/argocd-repo-server /usr/local/bin/argocd-repo-server
COPY --from=builder /src/dist/argocd /usr/local/bin/argocd

# Set permissions
RUN chown root:root /usr/local/bin/argocd* && \
    chmod 755 /usr/local/bin/argocd*

# Create directories for repositories and GPG keys
RUN mkdir -p /app/config/ssh && \
    mkdir -p /app/config/tls && \
    mkdir -p /app/config/gpg/source && \
    mkdir -p /app/config/gpg/keys && \
    chown -R argocd:argocd /app

# Create working directory
WORKDIR /app

# Switch to non-root user
USER argocd

# Enable FIPS mode
ENV OPENSSL_FORCE_FIPS_MODE=1

# Repo server-specific environment
ENV ARGOCD_EXEC_TIMEOUT="90s"
ENV ARGOCD_REPO_SERVER_STRICT_TLS="true"

# Health check for repo-server
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
    CMD ["/usr/local/bin/argocd", "version", "--client"] || exit 1

# Expose repo-server port
EXPOSE 8081

# Default command
ENTRYPOINT ["/usr/local/bin/argocd-repo-server"]
CMD ["--help"]

# Labels for metadata
LABEL name="mailknight/argocd-repo-server" \
      component="repo-server" \
      version="v2.11.0-mailknight" \
      description="FIPS-compliant ArgoCD Repository Server" \
      vendor="Mailknight" \
      security.fips="enabled" \
      org.opencontainers.image.source="https://github.com/Striar-Yunis/mailknight"