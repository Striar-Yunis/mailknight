name: ArgoCD FIPS-Compliant Build

on:
  workflow_call:
  workflow_dispatch:
  push:
    paths:
      - 'projects/argocd/**'
      - 'patches/argocd/**'
      - '.mailknight.yml'
      - 'scripts/**'

env:
  PROJECT_NAME: "argocd"
  UPSTREAM_REPO: "https://github.com/argoproj/argo-cd.git"
  UPSTREAM_VERSION: "v2.11.0"
  GO_VERSION: "1.21"
  NODE_VERSION: "18"
  
  # ArgoCD specific build variables
  ARGOCD_VERSION: "v2.11.0-mailknight"
  GOOS: "linux"
  GOARCH: "amd64"
  CGO_ENABLED: "1"
  
  # Security and build hardening
  CFLAGS: "-fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIE -O2"
  CXXFLAGS: "-fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIE -O2"
  LDFLAGS: "-Wl,-z,relro,-z,now -pie"
  CGO_CFLAGS: "-fstack-protector-strong -D_FORTIFY_SOURCE=2"
  CGO_LDFLAGS: "-Wl,-z,relro,-z,now"
  
  # FIPS compliance
  OPENSSL_FORCE_FIPS_MODE: "1"
  GOLANG_FIPS: "1"
  
  # Build reproducibility
  SOURCE_DATE_EPOCH: "1672531200"  # 2023-01-01

jobs:
  # Fetch ArgoCD source code (shared for all containers)
  fetch-source:
    runs-on: ubuntu-latest
      
    steps:
    - name: Checkout mailknight
      uses: actions/checkout@v4
      
    - name: Fetch upstream source in UBI8 container
      run: |
        docker run --rm \
          -v "$GITHUB_WORKSPACE:/workspace" \
          -w /workspace \
          -e PROJECT_NAME="$PROJECT_NAME" \
          -e UPSTREAM_VERSION="$UPSTREAM_VERSION" \
          registry.access.redhat.com/ubi8/ubi-minimal:latest \
          sh -c '
            microdnf update -y
            microdnf install -y git wget curl ca-certificates findutils tar python3 python3-pyyaml
            echo "FIPS Mode Check:"
            if [ -f /proc/sys/crypto/fips_enabled ]; then cat /proc/sys/crypto/fips_enabled; fi
            chmod +x scripts/fetch-upstream.sh
            scripts/fetch-upstream.sh ${PROJECT_NAME} ${UPSTREAM_VERSION}
          '
        
    - name: Upload source artifacts
      uses: actions/upload-artifact@v4
      with:
        name: argocd-source
        path: source/
        retention-days: 1

  # Apply Mailknight patches for FIPS compliance
  apply-patches:
    runs-on: ubuntu-latest
    needs: fetch-source
      
    steps:
    - name: Checkout mailknight
      uses: actions/checkout@v4
      
    - name: Download source artifacts
      uses: actions/download-artifact@v4
      with:
        name: argocd-source
        path: source/
        
    - name: Apply patches in UBI8 container
      run: |
        docker run --rm \
          -v "$GITHUB_WORKSPACE:/workspace" \
          -w /workspace \
          -e PROJECT_NAME="$PROJECT_NAME" \
          -e UPSTREAM_VERSION="$UPSTREAM_VERSION" \
          registry.access.redhat.com/ubi8/ubi-minimal:latest \
          sh -c '
            microdnf update -y
            microdnf install -y git wget curl ca-certificates findutils tar python3 python3-pyyaml
            chmod +x scripts/apply-patches.sh
            scripts/apply-patches.sh ${PROJECT_NAME} ${UPSTREAM_VERSION}
          '
        
    - name: Upload patched source
      uses: actions/upload-artifact@v4
      with:
        name: argocd-patched-source
        path: source/
        retention-days: 1

  # Build ArgoCD binaries with FIPS compliance
  build-binary:
    runs-on: ubuntu-latest
    needs: apply-patches
      
    steps:
    - name: Checkout mailknight
      uses: actions/checkout@v4
      
    - name: Download patched source
      uses: actions/download-artifact@v4
      with:
        name: argocd-patched-source
        path: source/
        
    - name: Build in UBI8 container
      run: |
        docker run --rm \
          -v "$GITHUB_WORKSPACE:/workspace" \
          -w /workspace \
          -e PROJECT_NAME="$PROJECT_NAME" \
          -e GO_VERSION="$GO_VERSION" \
          -e SYFT_VERSION="$SYFT_VERSION" \
          -e GOOS="$GOOS" \
          -e GOARCH="$GOARCH" \
          -e CGO_ENABLED="$CGO_ENABLED" \
          -e CFLAGS="$CFLAGS" \
          -e CXXFLAGS="$CXXFLAGS" \
          -e LDFLAGS="$LDFLAGS" \
          -e CGO_CFLAGS="$CGO_CFLAGS" \
          -e CGO_LDFLAGS="$CGO_LDFLAGS" \
          -e OPENSSL_FORCE_FIPS_MODE="$OPENSSL_FORCE_FIPS_MODE" \
          -e GOLANG_FIPS="$GOLANG_FIPS" \
          -e SOURCE_DATE_EPOCH="$SOURCE_DATE_EPOCH" \
          registry.access.redhat.com/ubi8/ubi-minimal:latest \
          sh -c '
            microdnf update -y
            microdnf install -y git wget curl ca-certificates gcc gcc-c++ make nodejs npm tar python3 python3-pyyaml findutils
            curl -L "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" | tar -xz -C /usr/local
            export PATH="/usr/local/go/bin:$PATH"
            go version
            node --version
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin v${SYFT_VERSION}
            syft version
            export PATH="/usr/local/go/bin:$PATH"
            chmod +x scripts/build-project.sh
            scripts/build-project.sh ${PROJECT_NAME}
          '
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: argocd-binaries
        path: |
          build/
          sbom.json
        retention-days: 1

  # Build container images matrix for all ArgoCD components
  build-containers:
    runs-on: ubuntu-latest
    needs: build-binary
    strategy:
      matrix:
        container:
          - name: server
            dockerfile: Dockerfile.server
          - name: repo-server
            dockerfile: Dockerfile.repo-server
          - name: application-controller
            dockerfile: Dockerfile.controller
          - name: applicationset-controller
            dockerfile: Dockerfile.applicationset-controller
          - name: dex
            dockerfile: Dockerfile.dex
          - name: notification
            dockerfile: Dockerfile.notification
    
    steps:
    - name: Checkout mailknight
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: argocd-binaries
        path: .
        
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build container
      run: |
        chmod +x scripts/build-container.sh
        scripts/build-container.sh ${PROJECT_NAME} ${UPSTREAM_VERSION} ${{ matrix.container.name }} ${{ matrix.container.dockerfile }}
        
    - name: Upload container artifacts
      uses: actions/upload-artifact@v4
      with:
        name: argocd-container-${{ matrix.container.name }}
        path: |
          images/${{ matrix.container.name }}/
          image-sbom-${{ matrix.container.name }}.json
        retention-days: 1

  # Scan containers for vulnerabilities
  scan-vulnerabilities:
    runs-on: ubuntu-latest
    needs: build-containers
    strategy:
      matrix:
        container: [server, repo-server, application-controller, applicationset-controller, dex, notification]
      
    steps:
    - name: Checkout mailknight
      uses: actions/checkout@v4
      
    - name: Download container artifacts
      uses: actions/download-artifact@v4
      with:
        name: argocd-container-${{ matrix.container }}
        path: .
        
    - name: Scan image in UBI8 container
      run: |
        docker run --rm \
          -v "$GITHUB_WORKSPACE:/workspace" \
          -w /workspace \
          -e PROJECT_NAME="$PROJECT_NAME" \
          -e UPSTREAM_VERSION="$UPSTREAM_VERSION" \
          -e TRIVY_VERSION="$TRIVY_VERSION" \
          -e CONTAINER_NAME="${{ matrix.container }}" \
          registry.access.redhat.com/ubi8/ubi-minimal:latest \
          sh -c '
            microdnf update -y
            microdnf install -y git wget curl ca-certificates tar python3 python3-pyyaml findutils
            TRIVY_URL="https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz"
            curl -sL "$TRIVY_URL" | tar -xz -C /tmp
            mv /tmp/trivy /usr/local/bin/trivy
            chmod +x /usr/local/bin/trivy
            trivy --version
            chmod +x scripts/scan-image.sh
            scripts/scan-image.sh ${PROJECT_NAME} ${UPSTREAM_VERSION} ${CONTAINER_NAME}
          '
        
    - name: Upload scan results
      uses: actions/upload-artifact@v4
      with:
        name: argocd-scan-results-${{ matrix.container }}
        path: scan-results/${{ matrix.container }}/
        retention-days: 7
        
    - name: Upload security reports
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: scan-results/${{ matrix.container }}/trivy-container.sarif
        category: container-${{ matrix.container }}
      continue-on-error: true

  # Test FIPS compliance for containers
  test-fips-compliance:
    runs-on: ubuntu-latest
    needs: build-containers
    strategy:
      matrix:
        container: [server, repo-server, application-controller, applicationset-controller, dex, notification]
      
    steps:
    - name: Checkout mailknight
      uses: actions/checkout@v4
      
    - name: Download container artifacts
      uses: actions/download-artifact@v4
      with:
        name: argocd-container-${{ matrix.container }}
        path: .
        
    - name: Test FIPS compliance in UBI8 container
      run: |
        docker run --rm \
          -v "$GITHUB_WORKSPACE:/workspace" \
          -w /workspace \
          -e PROJECT_NAME="$PROJECT_NAME" \
          -e UPSTREAM_VERSION="$UPSTREAM_VERSION" \
          -e CONTAINER_NAME="${{ matrix.container }}" \
          registry.access.redhat.com/ubi8/ubi-minimal:latest \
          sh -c '
            microdnf update -y
            microdnf install -y git wget curl ca-certificates tar python3 python3-pyyaml findutils
            chmod +x scripts/test-fips-compliance.sh
            scripts/test-fips-compliance.sh ${PROJECT_NAME} ${UPSTREAM_VERSION} ${CONTAINER_NAME}
          '
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: argocd-fips-test-${{ matrix.container }}
        path: test-results/${{ matrix.container }}/
        retention-days: 7

  # Release artifacts (only on tags or manual dispatch)
  release-artifacts:
    runs-on: ubuntu-latest
    needs: [scan-vulnerabilities, test-fips-compliance]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
      
    steps:
    - name: Checkout mailknight
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Release artifacts in UBI8 container
      run: |
        docker run --rm \
          -v "$GITHUB_WORKSPACE:/workspace" \
          -w /workspace \
          -e PROJECT_NAME="$PROJECT_NAME" \
          -e UPSTREAM_VERSION="$UPSTREAM_VERSION" \
          registry.access.redhat.com/ubi8/ubi-minimal:latest \
          sh -c '
            microdnf update -y
            microdnf install -y git wget curl ca-certificates tar python3 python3-pyyaml findutils
            chmod +x scripts/release-artifacts.sh
            scripts/release-artifacts.sh ${PROJECT_NAME} ${UPSTREAM_VERSION}
          '
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: argocd-release
        path: releases/
        retention-days: 30