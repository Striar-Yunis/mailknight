name: ArgoCD FIPS-Compliant Build
# Separated binary and container build pipeline with secure base containers

on:
  workflow_call:
  workflow_dispatch:
  push:
    paths:
      - 'projects/argocd/**'
      - 'patches/argocd/**'
      - 'scripts/**'
      - 'base/**'

env:
  # Project configuration - easy for LLMs to understand
  PROJECT_NAME: "argocd"
  UPSTREAM_REPO: "https://github.com/argoproj/argo-cd.git"
  UPSTREAM_VERSION: "v3.0.11"
  ARGOCD_VERSION: "v3.0.11-mailknight"
  GO_VERSION: "1.24.4"
  NODE_VERSION: "18"
  
  # Security and FIPS compliance
  FIPS_ENABLED: "true"
  OPENSSL_FORCE_FIPS_MODE: "1"
  GOLANG_FIPS: "1"
  CGO_ENABLED: "1"
  
  # Build hardening (security flags)
  CFLAGS: "-fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIE -O2"
  CXXFLAGS: "-fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIE -O2"
  LDFLAGS: "-Wl,-z,relro,-z,now -pie"
  CGO_CFLAGS: "-fstack-protector-strong -D_FORTIFY_SOURCE=2 -O2"
  CGO_LDFLAGS: "-Wl,-z,relro,-z,now"
  
  # Tools versions
  SYFT_VERSION: "0.100.0"
  TRIVY_VERSION: "0.48.3"
  
  # Build reproducibility
  SOURCE_DATE_EPOCH: "1672531200"  # 2023-01-01

jobs:
  # Stage 1: Build base containers (if needed)
  build-base-containers:
    runs-on: ubuntu-latest
    outputs:
      golang-base: ${{ steps.check-images.outputs.golang-base }}
      nodejs-base: ${{ steps.check-images.outputs.nodejs-base }}
      runtime-base: ${{ steps.check-images.outputs.runtime-base }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if base containers exist
        id: check-images
        run: |
          echo "üîç Checking if base containers exist..."
          # For CI, we'll always build fresh base containers to ensure they're up to date
          echo "golang-base=needed" >> $GITHUB_OUTPUT
          echo "nodejs-base=needed" >> $GITHUB_OUTPUT
          echo "runtime-base=needed" >> $GITHUB_OUTPUT

      - name: Build base containers
        run: |
          echo "üèóÔ∏è  Building mailknight base containers..."
          chmod +x scripts/build-base-containers.sh
          scripts/build-base-containers.sh all
          
          echo "‚úÖ Base containers built successfully"
          echo "üì¶ Available base containers:"
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" mailknight/*-base

      - name: Save base container images
        run: |
          echo "üíæ Saving base container images for next stages..."
          mkdir -p base-images
          docker save mailknight/golang-build-base:latest | gzip > base-images/golang-build-base.tar.gz
          docker save mailknight/nodejs-build-base:latest | gzip > base-images/nodejs-build-base.tar.gz  
          docker save mailknight/runtime-base:latest | gzip > base-images/runtime-base.tar.gz

      - name: Upload base container artifacts
        uses: actions/upload-artifact@v4
        with:
          name: base-containers
          path: base-images/
          retention-days: 1

  # Stage 2: Build binaries using base containers
  build-binaries:
    runs-on: ubuntu-latest
    needs: build-base-containers
    outputs:
      binary-artifacts: ${{ steps.build.outputs.artifacts }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download base container artifacts
        uses: actions/download-artifact@v4
        with:
          name: base-containers
          path: base-images/

      - name: Load base containers
        run: |
          echo "üì¶ Loading base containers..."
          docker load -i base-images/golang-build-base.tar.gz
          docker load -i base-images/nodejs-build-base.tar.gz
          docker load -i base-images/runtime-base.tar.gz
          docker images mailknight/*-base

      - name: Fetch upstream source and apply patches
        run: |
          echo "üì• Fetching upstream ArgoCD source..."
          chmod +x scripts/fetch-upstream.sh
          scripts/fetch-upstream.sh ${PROJECT_NAME} ${UPSTREAM_VERSION}
          
          echo "üîß Applying Mailknight security patches..."
          chmod +x scripts/apply-patches.sh
          scripts/apply-patches.sh ${PROJECT_NAME} ${UPSTREAM_VERSION}

      - name: Build binaries using base containers
        id: build
        run: |
          echo "üèóÔ∏è  Building ArgoCD binaries using secure base containers..."
          chmod +x scripts/build-project.sh
          scripts/build-project.sh ${PROJECT_NAME}
          
          echo "‚úÖ Binary build completed successfully!"
          echo "artifacts=true" >> $GITHUB_OUTPUT

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: argocd-binaries
          path: |
            build/
            sbom.json
          retention-days: 1

  # Stage 3: Build runtime containers using pre-built binaries
  build-containers:
    runs-on: ubuntu-latest
    needs: [build-base-containers, build-binaries]
    strategy:
      matrix:
        component: ["server", "repo-server", "application-controller", "applicationset-controller", "dex", "notification"]
      fail-fast: false
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download base container artifacts
        uses: actions/download-artifact@v4
        with:
          name: base-containers
          path: base-images/

      - name: Download binary artifacts
        uses: actions/download-artifact@v4
        with:
          name: argocd-binaries
          path: .

      - name: Load base containers
        run: |
          echo "üì¶ Loading base containers..."
          docker load -i base-images/runtime-base.tar.gz
          docker images mailknight/runtime-base

      - name: Build runtime container for component
        run: |
          echo "üê≥ Building runtime container for ${{ matrix.component }}..."
          
          # Define Dockerfile mapping for each component
          case "${{ matrix.component }}" in
            "server") DOCKERFILE="Dockerfile.server" ;;
            "repo-server") DOCKERFILE="Dockerfile.repo-server" ;;
            "application-controller") DOCKERFILE="Dockerfile.controller" ;;
            "applicationset-controller") DOCKERFILE="Dockerfile.applicationset-controller" ;;
            "dex") DOCKERFILE="Dockerfile.dex" ;;
            "notification") DOCKERFILE="Dockerfile.notification" ;;
          esac
          
          # Build runtime container using pre-built binaries
          chmod +x scripts/build-container.sh
          scripts/build-container.sh ${PROJECT_NAME} ${UPSTREAM_VERSION} ${{ matrix.component }} $DOCKERFILE
          
          echo "‚úÖ ${{ matrix.component }} container built successfully!"

      - name: Upload container artifacts
        uses: actions/upload-artifact@v4
        with:
          name: argocd-${{ matrix.component }}-container
          path: |
            images/${{ matrix.component }}/
            image-sbom-${{ matrix.component }}.json
          retention-days: 7

  # Stage 4: Security scanning and testing
  scan-and-test:
    runs-on: ubuntu-latest
    needs: build-containers
    strategy:
      matrix:
        component: ["server", "repo-server", "application-controller", "applicationset-controller", "dex", "notification"]
      fail-fast: false
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download container artifacts
        uses: actions/download-artifact@v4
        with:
          name: argocd-${{ matrix.component }}-container
          path: .

      - name: Load container image for scanning
        run: |
          echo "üì¶ Loading ${{ matrix.component }} container for scanning..."
          docker load -i "images/${{ matrix.component }}/argocd-${{ matrix.component }}-${UPSTREAM_VERSION}-mailknight.tar.gz"
          docker images mailknight/argocd-${{ matrix.component }}

      - name: Install Trivy scanner
        run: |
          echo "üîç Installing Trivy scanner..."
          TRIVY_URL="https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz"
          curl -sL "$TRIVY_URL" | tar -xz -C /tmp
          sudo mv /tmp/trivy /usr/local/bin/trivy
          chmod +x /usr/local/bin/trivy

      - name: Security scan with Trivy
        run: |
          echo "üîç Scanning ${{ matrix.component }} for vulnerabilities..."
          chmod +x scripts/scan-image.sh
          scripts/scan-image.sh ${PROJECT_NAME} ${UPSTREAM_VERSION} ${{ matrix.component }}

      - name: Test FIPS compliance
        run: |
          echo "üõ°Ô∏è  Testing ${{ matrix.component }} FIPS compliance..."
          chmod +x scripts/test-fips-compliance.sh
          scripts/test-fips-compliance.sh ${PROJECT_NAME} ${UPSTREAM_VERSION} ${{ matrix.component }}

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: argocd-${{ matrix.component }}-scan-results
          path: |
            scan-results/${{ matrix.component }}/
            test-results/${{ matrix.component }}/
          retention-days: 7

      - name: Upload security scan results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: scan-results/${{ matrix.component }}/trivy-container.sarif
          category: ${{ matrix.component }}-security
        continue-on-error: true

  # Stage 5: Release artifacts (only on tags or manual dispatch)
  release:
    runs-on: ubuntu-latest
    needs: [build-binaries, build-containers, scan-and-test]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create release artifacts
        run: |
          echo "üì¶ Creating ArgoCD release artifacts..."
          chmod +x scripts/release-artifacts.sh
          scripts/release-artifacts.sh ${PROJECT_NAME} ${UPSTREAM_VERSION}
          
          echo "‚úÖ Release artifacts created successfully!"
        
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: argocd-release-complete
          path: releases/
          retention-days: 30

      - name: Generate release summary
        run: |
          echo "## üéâ ArgoCD Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Method:** Separated binary and container builds" >> $GITHUB_STEP_SUMMARY
          echo "**Base Containers:** Custom FIPS-compliant base containers" >> $GITHUB_STEP_SUMMARY  
          echo "**Security Features:** FIPS-140-2, Stack Protection, FORTIFY_SOURCE, RELRO" >> $GITHUB_STEP_SUMMARY
          echo "**Components Built:** server, repo-server, application-controller, applicationset-controller, dex, notification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-built FIPS-compliant binaries" >> $GITHUB_STEP_SUMMARY
          echo "- Minimal runtime containers" >> $GITHUB_STEP_SUMMARY
          echo "- Security scan results (SARIF)" >> $GITHUB_STEP_SUMMARY
          echo "- Software Bill of Materials (SBOM)" >> $GITHUB_STEP_SUMMARY
          echo "- FIPS compliance test results" >> $GITHUB_STEP_SUMMARY