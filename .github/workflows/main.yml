---
name: Mailknight Pipeline
# Simplified LLM-friendly pipeline for secure FIPS-compliant container builds

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Weekly upstream update check
    - cron: '0 6 * * 1'
  issues:
    types: [assigned]
  workflow_dispatch:

env:
  # FIPS compliance and security settings
  FIPS_ENABLED: "true"
  TRIVY_VERSION: "0.48.3"
  SYFT_VERSION: "0.100.0"
  
  # Hardened build flags for security
  CFLAGS: "-fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIE -O2"
  CXXFLAGS: "-fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIE -O2"
  LDFLAGS: "-Wl,-z,relro,-z,now -pie"

jobs:
  # Copilot automation: Auto-run when issues assigned to copilot
  copilot-autorun:
    if: github.event_name == 'issues' && github.event.action == 'assigned' && github.event.assignee.login == 'copilot'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-trigger pipeline for copilot
        run: |
          echo "ü§ñ Issue #${{ github.event.issue.number }} assigned to copilot"
          echo "Auto-triggering pipeline for analysis and fixes"
          # This will trigger the main pipeline through workflow_dispatch
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/main.yml/dispatches \
            -d '{"ref":"${{ github.ref }}"}'

  # Main build pipeline - consolidated for simplicity
  build-and-validate:
    if: github.event_name != 'issues'
    runs-on: ubuntu-latest
    outputs:
      argocd-changed: ${{ steps.changes.outputs.argocd }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect project changes
        id: changes
        run: |
          echo "üîç Detecting changes in project files..."
          if git diff --name-only HEAD~1 HEAD | grep -E "(projects/argocd/|patches/argocd/|scripts/)" > /dev/null || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "argocd=true" >> $GITHUB_OUTPUT
            echo "‚úÖ ArgoCD changes detected or manual trigger"
          else
            echo "argocd=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No ArgoCD changes detected"
          fi

      - name: Validate configuration
        run: |
          echo "üìã Validating Mailknight configuration..."
          docker run --rm \
            -v "$GITHUB_WORKSPACE:/workspace" \
            -w /workspace \
            registry.access.redhat.com/ubi8/ubi-minimal:latest \
            sh -c '
              microdnf update -y
              microdnf install -y git python3 python3-pyyaml findutils
              echo "Configuration validation complete ‚úÖ"
            '

  # ArgoCD project build (only if changes detected)
  argocd-build:
    needs: build-and-validate
    if: needs.build-and-validate.outputs.argocd-changed == 'true'
    uses: ./.github/workflows/argocd.yml
    secrets: inherit

  # Auto-request fixes on failure
  request-fixes-on-failure:
    needs: [build-and-validate, argocd-build]
    if: always() && (needs.build-and-validate.result == 'failure' || needs.argocd-build.result == 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Create fix request issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üîß Pipeline Failure - Auto Fix Request`;
            const body = `
            ## Pipeline Failure Detected
            
            **Workflow:** ${{ github.workflow }}
            **Run:** ${{ github.run_id }}
            **Branch:** ${{ github.ref }}
            **Commit:** ${{ github.sha }}
            
            ### Failed Jobs:
            ${needs.build-and-validate.result === 'failure' ? '- ‚ùå build-and-validate' : ''}
            ${needs.argocd-build.result === 'failure' ? '- ‚ùå argocd-build' : ''}
            
            ### Next Steps:
            - [ ] Review pipeline logs
            - [ ] Identify root cause
            - [ ] Apply necessary fixes
            - [ ] Re-run pipeline
            
            **Auto-assigned to:** @copilot for automated analysis and resolution.
            
            [View Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              assignees: ['copilot'],
              labels: ['bug', 'pipeline-failure', 'auto-generated']
            });
